syntax = "proto3";

option csharp_namespace = "ChessGrpc";

package chessGrpc;

// All available ChessServices when game has started
service ChessGame {

  // When a move is made in the game 
  rpc MakeMove (MakeMoveRequest) returns (MakeMoveResponse);

  // Polling request to get GameUpdate
  rpc GetGameUpdate (GameStatusRequest) returns (GameStatusResponse);

  // Move has to be verified by opponent if it was a valid move
  rpc VerifyMove (VerifyMoveRequest) returns (VerifyMoveResponse);

  // Get Details for a single move
  rpc GetMove ( GetMoveRequest ) returns (GetMoveResponse);

  // Called when Game ended 
  rpc EndGame ( EndGameRequest ) returns (EndGameResponse);

  // Returns all moves made in a game
  rpc GetAllMoves ( GetAllMovesRequest) returns (GetAllMovesResponse);

}

service ChessMatchmaking {

  // Request to start a new game
  rpc StartGame (StartGameRequest) returns (StartGameResponse);

}


message StartGameRequest {
  string player_name = 1; // Name of the User
}


message StartGameResponse {
  string game_id = 1;     // Unique ID of game
  string player_color = 2; // Assigned colour for the Client
}


message MakeMoveRequest {
  string game_id = 1;     // Unique ID of game
  string player_name = 2; // Name of the User
  string piece = 3;        // Identifies the chessPiece (e.g. N for Knight)
  string moveOrigin = 4; // The chess field on which the piece is originally located (e.g.: a4)
  string moveDestination = 5; // The chess field on which the piece is moved to (e.g.: a5)
}

message MakeMoveResponse {
  bool success = 1;       // If move was successful: true
  string message = 2;     
}


message GameStatusRequest {
  string game_id = 1;     
}


message GameStatusResponse {
  string game_id = 1;
  string status = 2; // status of the game, can either be "waiting", "ongoing" or "finished"
  string current_turn = 3; // black or white
  string white_player = 4;
  string black_player = 5;
  string last_moveId = 6;
  string last_moveOrigin = 7;
  string last_moveDesination = 8;
  bool isVerified = 9; // Identifies whether the last move made has already been verified or not
}

message VerifyMoveRequest {
  string game_id = 1;     
  bool opponent_answer = 2; //true is opponent said last move was a valid move, otherwise false
}

message VerifyMoveResponse {
  bool success = 1;     
}

message GetMoveRequest {
  string moveId = 1;     
}

message GetMoveResponse {
  bool success = 1;
  string game_id = 2;
  string player_name = 3;
  string piece = 4;
  string moveOrigin = 5;
  string moveDestination = 6;
  string moveTime = 7;
}

message EndGameRequest{
  string game_id = 1;
  string winner = 2;
}

message EndGameResponse {
  bool success = 1;
}


message GetAllMovesRequest {
  string game_id = 1;
}

message SingleMove {
  string piece = 2;
  string moveOrigin = 3;
  string moveDestination = 4;
}

message GetAllMovesResponse {
  repeated SingleMove moves = 1;
}